{"version":3,"file":"static/js/247.bc3411c7.chunk.js","mappings":"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","sources":["additional/const.jsx","additional/function.jsx","components/Cast/Cast.jsx"],"sourcesContent":["export const API_KEY = 'c22cf15536964c1cf38cb65c76fb41a1';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n","import axios from 'axios';\nimport { API_KEY, BASE_URL } from 'additional/const';\n\nexport const fetchActors = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchReview = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchDayMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?language=en-US&api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchMoviesDetails = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?language=en-US&api_key=${API_KEY}`\n  );\n  return data;\n};\n","// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n// import { API_KEY, BASE_URL, defaultImg } from 'additional/const';\n\n// const Cast = () => {\n//   const { movieId } = useParams();\n//   const [actors, setActors] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchActors = async () => {\n//       try {\n//         const { data } = await axios.get(\n//           `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n//         );\n//         setActors(data.cast);\n//       } catch (error) {\n//         setError(error.message);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchActors();\n//   }, [movieId]);\n\n//   return (\n//     <div>\n//       <h2>Cast</h2>\n\n//       {isLoading && <p>Loading...</p>}\n//       {error && <p>Error: {error}</p>}\n//       {actors.map(({ actor, profile_path }) => (\n//         <div key={actor.id}>\n//           <img\n//             src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n//             // src={`${profile_path ? BASE_URL + profile_path : defaultImg}`}\n//             alt={`${actor.name} portrait`}\n//           />\n//           <p>{actor.name}</p>\n//           <p>Character: {actor.character}</p>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Cast;\n\nimport React, { useState, useEffect } from 'react';\n// import axios from 'axios';\nimport { useParams } from 'react-router-dom';\n// import { API_KEY, BASE_URL } from 'additional/const';\nimport { fetchActors } from 'additional/function';\nimport { defaultImg } from 'additional/const';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error] = useState(null);\n\n  // useEffect(() => {\n  //   const findActors = async () => {\n  //     try {\n  //       const { data } = await axios.get(\n  //         `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  //       );\n  //       setActors(data.cast);\n\n  //     } catch (error) {\n  //       setError(error.message);\n  //     } finally {\n  //       setIsLoading(false);\n  //     }\n  //   };\n\n  //   findActors();\n  // }, [movieId]);\n\n  useEffect(() => {\n    fetchActors(movieId).then(({ cast }) => {\n      setActors(cast);\n      setIsLoading(false);\n    });\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Error: {error}</p>}\n      {actors.map(({ profile_path, id, name, character }) => (\n        <div key={id}>\n          <img\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                : defaultImg\n            }\n            alt={`${name} portrait`}\n          />\n          <p>{name}</p>\n          <p>Character: {character}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","BASE_URL","defaultImg","fetchActors","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","movieId","_yield$axios$get","data","_context","prev","next","axios","concat","sent","abrupt","stop","_x","apply","arguments","fetchReview","_ref2","_callee2","_yield$axios$get2","_context2","_x2","fetchDayMovies","_ref3","_callee3","_yield$axios$get3","_context3","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","isLoading","setIsLoading","_useState5","error","useEffect","then","cast","_jsxs","children","_jsx","map","profile_path","id","name","character","src","alt"],"sourceRoot":""}
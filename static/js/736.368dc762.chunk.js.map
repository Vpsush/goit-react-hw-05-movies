{"version":3,"file":"static/js/736.368dc762.chunk.js","mappings":"yNAKAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAwCzB,UAtCoB,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAmBtB,OAjBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEM3B,EAAAA,EAAAA,IAAU,SAAD4B,OACrB3B,EAAO,qBAAA2B,OAbV,qCAcN,KAAD,EAAAL,EAAAE,EAAAI,KAFOL,EAAID,EAAJC,KAGRhB,EAAWgB,EAAKM,SAASL,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEzBT,EAASS,EAAAM,GAAMC,SAAS,QAEJ,OAFIP,EAAAC,KAAA,GAExBd,GAAa,GAAOa,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,wBAEvB,kBAXiB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAalBlB,GACF,GAAG,CAACjB,KAGFoC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACH3B,IAAa4B,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAChBvB,IAASsB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAQvB,KACpBR,EAAQiC,KAAI,SAAAC,GAAM,OACjBJ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIG,EAAOC,UACXH,EAAAA,EAAAA,KAAA,KAAAD,SAAIG,EAAOE,YAFHF,EAAOG,GAGX,MAId,C","sources":["pages/Reviews.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\nconst API_KEY = 'c22cf15536964c1cf38cb65c76fb41a1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst PageReviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const { data } = await axios.get(\n          `movie/${movieId}/reviews?api_key=${API_KEY}`\n        );\n        setReviews(data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Error: {error}</p>}\n      {reviews.map(review => (\n        <div key={review.id}>\n          <p>{review.author}</p>\n          <p>{review.content}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PageReviews;\n"],"names":["axios","movieId","useParams","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","data","_context","prev","next","concat","sent","results","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","map","review","author","content","id"],"sourceRoot":""}